{"version":3,"sources":["airtable.ts"],"names":[],"mappings":"AAAA;;GAEG;AACH,OAAO,EAAA,UAAE,EAAU,MAAM,eAAA,CAAgB;AACzC,OAAO,EAAA,IAAE,EAAI,MAAM,eAAA,CAAgB;AAEnC,OAAO,EAAA,IAAE,EAAI,MAAM,QAAA,CAAS;AAG5B,IAAM,cAAA,GAAwC;IAC5C,WAAW,EAAE,0BAAA;IACb,UAAU,EAAE,CAAA;CACb,CAAC;AAGF;IAIE,kBAAmB,IAAU,EACjB,OAA+B;QADxB,SAAI,GAAJ,IAAI,CAAM;QAE3B,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;IACzD,CAAC;IAED,4BAAS,GAAT,UAAU,IAA2B;QACnC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QACnD,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAE3B,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,uBAAI,GAAJ,UAAK,MAAc;QACjB,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,MAAM,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAChC,CAAC;IAED,sBAAI,6BAAO;aAAX;YACE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACvB,CAAC;;;OAAA;IAEO,sCAAmB,GAA3B;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;YAC1B,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;QAChE,CAAC;IACH,CAAC;IASH,eAAC;AAAD,CAtCA,AAsCC;;AARM,mBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,uBAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,IAAI,GAAG;IACd,IAAI;CACH,EAH6F,CAG7F,CAAC","file":"airtable.js","sourceRoot":"","sourcesContent":["/**\r\n * Created by bohoffi on 30.05.2017.\r\n */\r\nimport {Injectable} from '@angular/core';\r\nimport {Http} from '@angular/http';\r\n\r\nimport {Base} from './base';\r\nimport {AirtableConfiguration} from '../interfaces';\r\n\r\nconst defaultOptions: AirtableConfiguration = {\r\n  endpointUrl: 'https://api.airtable.com',\r\n  apiVersion: 0\r\n};\r\n\r\n\r\nexport class Airtable {\r\n\r\n  private _options: AirtableConfiguration;\r\n\r\n  constructor(public http: Http,\r\n              _config?: AirtableConfiguration) {\r\n    this._options = Object.assign(defaultOptions, _config);\r\n  }\r\n\r\n  configure(opts: AirtableConfiguration): Airtable {\r\n    this._options = Object.assign(this._options, opts);\r\n    this._checkConfiguration();\r\n\r\n    return this;\r\n  }\r\n\r\n  base(baseId: string): Base {\r\n    this._checkConfiguration();\r\n    return new Base(baseId, this);\r\n  }\r\n\r\n  get options(): AirtableConfiguration {\r\n    return this._options;\r\n  }\r\n\r\n  private _checkConfiguration(): void {\r\n    if (!this._options.apiKey) {\r\n      throw new Error('API key is required to connect to Airtable');\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\nnull,\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}