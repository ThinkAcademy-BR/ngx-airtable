{"version":3,"sources":["table.ts"],"names":[],"mappings":"AAAA;;GAEG;AACH,OAAO,EAAC,aAAa,EAAC,MAAM,eAAe,CAAC;AAI5C,OAAO,EAAC,MAAM,EAAC,MAAM,UAAU,CAAC;AAChC,OAAO,EAAC,SAAS,EAAC,MAAM,aAAa,CAAC;AACtC,OAAO,EAAC,KAAK,EAAC,MAAM,SAAS,CAAC;AAG9B;IAQE,eAAY,IAGX,EAAE,IAAU;QAEX,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACrC,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;QACxD,CAAC;QAED,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACpB,CAAC;IAED;;;;OAIG;IACH,oBAAI,GAAJ,UAAK,EAAU;QACb,MAAM,CAAC,IAAI,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;IACtC,CAAC;IAED,sBAAM,GAAN,UAAO,MAAqB;QAC1B,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACZ,MAAM,GAAG,EAAE,CAAC;QACd,CAAC;QAED,MAAM,CAAC,IAAI,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACjC,CAAC;IAED;;;;OAIG;IACH,sBAAM,GAAN,UAAO,UAAe;QACpB,MAAM,CAAC,IAAI,SAAS,CAAC;YACnB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,MAAM,EAAE,aAAa,CAAC,IAAI;YAC1B,IAAI,EAAE,IAAI,CAAC,kBAAkB;YAC7B,MAAM,EAAE;gBACN,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM;aAC3C;YACD,IAAI,EAAE,UAAU;SACjB,CAAC;aACC,OAAO,EAAE,CAAC;IACf,CAAC;IAED;;;;;OAKG;IACH,sBAAM,GAAN,UAAO,EAAU,EAAE,UAAe;QAChC,MAAM,CAAC,IAAI,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;IACtD,CAAC;IAED;;;;OAIG;IACH,uBAAO,GAAP,UAAQ,EAAU;QAChB,MAAM,CAAC,IAAI,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,OAAO,EAAE,CAAC;IACxC,CAAC;IAED;;;;;OAKG;IACH,uBAAO,GAAP,UAAQ,EAAU,EAAE,UAAe;QACjC,MAAM,CAAC,IAAI,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IACpD,CAAC;IAED,sBAAI,uBAAI;aAAR;YACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACpB,CAAC;;;OAAA;IAED,sBAAI,qCAAkB;aAAtB;YACE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,IAAI,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,EAAE,CAAC,CAAC;QAC/G,CAAC;;;OAAA;IACH,YAAC;AAAD,CA5FA,AA4FC,IAAA","file":"table.js","sourceRoot":"","sourcesContent":["/**\r\n * Created by bohoffi on 30.05.2017.\r\n */\r\nimport {RequestMethod} from '@angular/http';\r\nimport {Observable} from 'rxjs/Observable';\r\n\r\nimport {Base} from './base';\r\nimport {Record} from './record';\r\nimport {RunAction} from './runaction';\r\nimport {Query} from './query';\r\nimport {SelectParams} from '../interfaces';\r\n\r\nexport class Table {\r\n\r\n  private _options: {\r\n    tableName?: string;\r\n    tableId?: string;\r\n  };\r\n  private _base: Base;\r\n\r\n  constructor(opts: {\r\n    tableName?: string;\r\n    tableId?: string;\r\n  }, base: Base) {\r\n\r\n    if (!opts.tableName && !opts.tableId) {\r\n      throw new Error('Table name or table ID is required');\r\n    }\r\n\r\n    this._options = opts;\r\n    this._base = base;\r\n  }\r\n\r\n  /**\r\n   * Returns the record defined by the given id.\r\n   * @param id\r\n   * @returns {Observable<any>}\r\n   */\r\n  find(id: string): Observable<any> {\r\n    return new Record(id, this).fetch();\r\n  }\r\n\r\n  select(params?: SelectParams): Query {\r\n    if (!params) {\r\n      params = {};\r\n    }\r\n\r\n    return new Query(params, this);\r\n  }\r\n\r\n  /**\r\n   * Creates a new record with the given data.\r\n   * @param entityData\r\n   * @returns {Observable<any>}\r\n   */\r\n  create(entityData: any): Observable<any> {\r\n    return new RunAction({\r\n      base: this.base,\r\n      method: RequestMethod.Post,\r\n      path: this.urlEncodedNameOrId,\r\n      params: {\r\n        api_key: this.base.airtable.options.apiKey\r\n      },\r\n      body: entityData\r\n    })\r\n      .perform();\r\n  }\r\n\r\n  /**\r\n   * Updates a record defined by the given id with the given data.\r\n   * @param id\r\n   * @param entityData\r\n   * @returns {Observable<any>}\r\n   */\r\n  update(id: string, entityData: any): Observable<any> {\r\n    return new Record(id, this).patchUpdate(entityData);\r\n  }\r\n\r\n  /**\r\n   * Deletes a record defined by the given id.\r\n   * @param id\r\n   * @returns {Observable<any>}\r\n   */\r\n  destroy(id: string): Observable<any> {\r\n    return new Record(id, this).destroy();\r\n  }\r\n\r\n  /**\r\n   * Replaces a record defined by the given id with the given data.\r\n   * @param id\r\n   * @param entityData\r\n   * @returns {Observable<any>}\r\n   */\r\n  replace(id: string, entityData: any): Observable<any> {\r\n    return new Record(id, this).putUpdate(entityData);\r\n  }\r\n\r\n  get base(): Base {\r\n    return this._base;\r\n  }\r\n\r\n  get urlEncodedNameOrId(): string {\r\n    return this._options.tableId || encodeURIComponent(!!this._options.tableName ? this._options.tableName : '');\r\n  }\r\n}\r\n"]}