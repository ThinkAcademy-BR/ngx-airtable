{"version":3,"sources":["utils.ts"],"names":[],"mappings":"AAKA,OAAO,EAAC,QAAQ,EAAC,MAAM,YAAY,CAAC;AAGpC,MAAM,2BAA2B,IAAU,EAAE,MAA8B;IACzE,MAAM,CAAC,IAAI,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AACpC,CAAC;AAED,MAAM,CAAC,IAAM,oBAAoB,GAAG,UAAC,MAAoB,EAAE,UAAmB;IAE5E,IAAM,gBAAgB,GAAW,EAAE,CAAC;IAEpC,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;QACpB,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,SAAiB,EAAE,KAAa;YACrD,gBAAgB,CAAC,YAAU,KAAK,MAAG,CAAC,GAAG,SAAS,CAAC;QACnD,CAAC,CAAC,CAAC;IACL,CAAC;IAED,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC;QAC7B,gBAAgB,CAAC,iBAAiB,CAAC,GAAG,MAAM,CAAC,eAAe,CAAC;IAC/D,CAAC;IAED,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;QACxB,gBAAgB,CAAC,YAAY,CAAC,GAAG,MAAM,CAAC,UAAU,CAAC;IACrD,CAAC;IAED,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;QACtB,gBAAgB,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC;IACjD,CAAC;IAED,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QAClB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,UAAC,IAAe,EAAE,KAAa;YACjD,gBAAgB,CAAC,UAAQ,KAAK,aAAU,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;YACvD,gBAAgB,CAAC,UAAQ,KAAK,iBAAc,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;QACjE,CAAC,CAAC,CAAC;IACL,CAAC;IAED,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QAClB,gBAAgB,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC;IACzC,CAAC;IAED,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;QACjB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAC,GAAW;YAC1C,gBAAgB,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,gBAAgB,CAAC;AAC1B,CAAC,CAAC","file":"utils.js","sourceRoot":"","sourcesContent":["/**\r\n * Created by bohoffi on 30.05.2017.\r\n */\r\nimport {Http} from '@angular/http';\r\n\r\nimport {Airtable} from './airtable';\r\nimport {AirtableConfiguration, Params, SelectParams, SortParam} from '../interfaces';\r\n\r\nexport function _airtableFactory(http: Http, config?: AirtableConfiguration): Airtable {\r\n  return new Airtable(http, config);\r\n}\r\n\r\nexport const normalizeQueryParams = (params: SelectParams, additional?: Params): Params => {\r\n\r\n  const normalizedParams: Params = {};\r\n\r\n  if (!!params.fields) {\r\n    params.fields.forEach((fieldName: string, index: number) => {\r\n      normalizedParams[`fields[${index}]`] = fieldName;\r\n    });\r\n  }\r\n\r\n  if (!!params.filterByFormula) {\r\n    normalizedParams['filterByFormula'] = params.filterByFormula;\r\n  }\r\n\r\n  if (!!params.maxRecords) {\r\n    normalizedParams['maxRecords'] = params.maxRecords;\r\n  }\r\n\r\n  if (!!params.pageSize) {\r\n    normalizedParams['pageSize'] = params.pageSize;\r\n  }\r\n\r\n  if (!!params.sort) {\r\n    params.sort.forEach((sort: SortParam, index: number) => {\r\n      normalizedParams[`sort[${index}][field]`] = sort.field;\r\n      normalizedParams[`sort[${index}][direction]`] = sort.direction;\r\n    });\r\n  }\r\n\r\n  if (!!params.view) {\r\n    normalizedParams['view'] = params.view;\r\n  }\r\n\r\n  if (!!additional) {\r\n    Object.keys(additional).forEach((key: string) => {\r\n      normalizedParams[key] = additional[key];\r\n    });\r\n  }\r\n\r\n  return normalizedParams;\r\n};\r\n"]}