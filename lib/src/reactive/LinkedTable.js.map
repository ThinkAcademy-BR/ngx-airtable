{"version":3,"sources":["LinkedTable.ts"],"names":[],"mappings":";;;;;;;;;;AAIA,OAAO,0BAA0B,CAAC;AAElC,OAAO,EAAC,KAAK,EAAC,MAAM,oBAAoB,CAAC;AAEzC,OAAO,EAAC,WAAW,EAAC,MAAM,eAAe,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAC,MAAM,SAAS,CAAC;AAEtC;IAAiC,+BAAK;IAMpC,qBAAoB,MAAa,EAAU,KAAa;QAAxD,YACE,kBAAM,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,SACnC;QAFmB,YAAM,GAAN,MAAM,CAAO;QAAU,WAAK,GAAL,KAAK,CAAQ;;IAExD,CAAC;IANM,qBAAS,GAAhB,UAAiB,MAAa,EAAE,KAAa;QAC3C,MAAM,CAAC,IAAI,WAAW,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IACxC,CAAC;IAMD,0BAAI,GAAJ,UAAK,EAAU;QAAf,iBAGC;QAFC,MAAM,CAAC,iBAAM,IAAI,YAAC,EAAE,CAAC;aAClB,GAAG,CAAC,UAAC,MAAW,IAAK,OAAA,aAAa,CAAC,MAAM,EAAE,KAAI,CAAC,KAAK,EAAE,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAnD,CAAmD,CAAC,CAAC;IAC/E,CAAC;IAED,4BAAM,GAAN,UAAO,MAAqB;QAC1B,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACZ,MAAM,GAAG,EAAE,CAAC;QACd,CAAC;QAED,MAAM,CAAC,IAAI,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1D,CAAC;IAED,4BAAM,GAAN,UAAO,UAAe;QACpB,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;IAChE,CAAC;IAED,4BAAM,GAAN,UAAO,EAAU,EAAE,UAAe;QAChC,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;IAChE,CAAC;IAED,6BAAO,GAAP,UAAQ,EAAU;QAChB,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;IACjE,CAAC;IAED,6BAAO,GAAP,UAAQ,EAAU,EAAE,UAAe;QACjC,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;IACjE,CAAC;IACH,kBAAC;AAAD,CAtCA,AAsCC,CAtCgC,KAAK,GAsCrC","file":"LinkedTable.js","sourceRoot":"","sourcesContent":["/**\r\n * Created by bohoffi on 01.06.2017.\r\n */\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/filter';\r\n\r\nimport {Table} from '../node-port/index';\r\nimport {Link, SelectParams} from '../interfaces';\r\nimport {LinkedQuery} from './LinkedQuery';\r\nimport {_extendLinked} from './utils';\r\n\r\nexport class LinkedTable extends Table {\r\n\r\n  static fromTable(origin: Table, links: Link[]): LinkedTable {\r\n    return new LinkedTable(origin, links);\r\n  }\r\n\r\n  constructor(private origin: Table, private links: Link[]) {\r\n    super(origin.options, origin.base);\r\n  }\r\n\r\n  find(id: string): Observable<any> {\r\n    return super.find(id)\r\n      .map((record: any) => _extendLinked(record, this.links, this.origin.base));\r\n  }\r\n\r\n  select(params?: SelectParams): LinkedQuery {\r\n    if (!params) {\r\n      params = {};\r\n    }\r\n\r\n    return new LinkedQuery(params, this.origin, this.links);\r\n  }\r\n\r\n  create(entityData: any): Observable<any> {\r\n    throw new Error('LinkedTable is not able to create entities');\r\n  }\r\n\r\n  update(id: string, entityData: any): Observable<any> {\r\n    throw new Error('LinkedTable is not able to update entities');\r\n  }\r\n\r\n  destroy(id: string): Observable<any> {\r\n    throw new Error('LinkedTable is not able to destroy entities');\r\n  }\r\n\r\n  replace(id: string, entityData: any): Observable<any> {\r\n    throw new Error('LinkedTable is not able to replace entities');\r\n  }\r\n}\r\n"]}